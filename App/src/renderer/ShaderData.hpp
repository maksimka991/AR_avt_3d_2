#pragma once

namespace NApp
{

static const char* SHADER_VERTEX_SOURCE =
      "#version 120\n\n"
      "\n"
      "uniform mat4 projectionMatrix;\n"
      "uniform mat4 viewMatrix;\n"
      "uniform mat4 modelMatrix;\n"
      "uniform mat4 boneMatrices[60];\n"
      "\n"
      "attribute vec4 inPosition;\n"
      "attribute vec3 inNormal;\n"
      "attribute vec4 inColor;\n"
      "attribute vec2 inTexCoord;\n"
      "attribute vec4 inBoneWeights;\n"
      "attribute vec4 inBoneIndices;\n"
      "\n"
      "varying vec4 worldPosition;\n"
      "varying vec3 worldNormal;\n"
      "varying vec4 outColor;\n"
      "varying vec2 outTexCoord;\n"
      "\n"
      "void main()\n"
      "{\n"
      "  vec4 boneWeights = inBoneWeights;\n"
      "  boneWeights.w = 1.0 - dot(boneWeights.xyz, vec3(1.0, 1.0, 1.0));\n"
      "\n"
      "  mat4 transformMatrix = boneWeights.x * boneMatrices[int(inBoneIndices.x)];\n"
      "  transformMatrix += boneWeights.y * boneMatrices[int(inBoneIndices.y)];\n"
      "  transformMatrix += boneWeights.z * boneMatrices[int(inBoneIndices.z)];\n"
      "  transformMatrix += boneWeights.w * boneMatrices[int(inBoneIndices.w)];\n"
      "\n"
      "  vec4 newPosition = transformMatrix * inPosition;\n"
      "  vec4 newNormal = transformMatrix * vec4(inNormal, 0.0);\n"
      "  worldNormal = (modelMatrix * newNormal).xyz;\n"
      "\n"
      "  gl_Position = projectionMatrix * viewMatrix * modelMatrix * newPosition;\n"
      "  worldPosition = modelMatrix * newPosition;\n"
      "  outColor = inColor;\n"
      "  outTexCoord = inTexCoord;\n"
      "}\n";

static const char * SHADER_FRAGMENT_SOURCE =
      "#version 120\n\n"
      "\n"
      "uniform vec3 lightPosition;\n"
      "uniform vec4 lightAmbientColor;\n"
      "uniform vec4 lightDiffuseColor;\n"
      "uniform int useTexture;\n"
      "uniform sampler2D texture;\n"
      "\n"
      "varying vec4 worldPosition;\n"
      "varying vec3 worldNormal;\n"
      "varying vec4 outColor;\n"
      "varying vec2 outTexCoord;\n"
      "\n"
      "void main()\n"
      "{\n"
      "  vec3 normal = normalize(worldNormal);\n"
      "  vec3 position = worldPosition.xyz - worldPosition.w;\n"
      "  vec3 lightVector = normalize(lightPosition);\n"
      "  vec4 fragColor;\n"
      "  \n"
      "  if (useTexture == 0)\n"
      "  {\n"
      "    fragColor = outColor;\n"
      "  } else\n"
      "  {\n"
      "    fragColor = texture2D(texture, outTexCoord);\n"
      "  }\n"
      "  \n"
      "  vec4 ambient = fragColor * lightAmbientColor;\n"
      "  vec4 diffuse = fragColor * lightDiffuseColor * max(0.0, dot(normal, lightVector));\n"
      "  \n"
      "  gl_FragColor = ambient + diffuse;\n"
      "}\n";

} /* namespace NApp */
